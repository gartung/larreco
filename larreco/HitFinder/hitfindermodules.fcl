// from larreco/RecoAlg:
#include "hitalgorithms.fcl"
#include "HitFinderTools.fcl"

BEGIN_PROLOG

standard_hitcheater:
{
 module_type:       "HitCheater"
 G4ModuleLabel:     "largeant"
 WireModuleLabel:   "caldata"
 MinimumCharge:     5.
}

standard_hitcheater_preSpill:  @local::standard_hitcheater
standard_hitcheater_postSpill: @local::standard_hitcheater
standard_hitcheater_preSpill.WireModuleLabel:  "caldataPreSpill:preSpill"
standard_hitcheater_postSpill.WireModuleLabel: "caldataPostSpill:postSpill"

standard_hitfinder:
{
 module_type:         "FFTHitFinder"
 CalDataModuleLabel:  "caldata"      
 MinSigInd:            6.0              # Induction signal height threshold  
 MinSigCol:            11.0             # Collection signal height threshold
 IndWidth:             6.0              # Initial width for induction fit
 ColWidth:             7.8              # Initial width for collection fit
 IndMinWidth:          4.0              # Induction Hit width threshold
 ColMinWidth:          6.0              # Collection hit width threshold
 MaxMultiHit:          3                # maximum hits for multi fit   
 AreaMethod:           0                # 0 = area by integral, 1 = area by gaussian area formula
 AreaNorms:            [ 13.25, 26.31 ] # normalizations that put signal area in 
                                        # same scale as peak height. 
}

gaus_hitfinder:
{
    module_type:          "GausHitFinder"
    CalDataModuleLabel:   "caldata"
    MaxMultiHit:          10                 # maximum hits for multi gaussia fit attempt
    AreaMethod:           0                  # 0 = area by integral, 1 = area by gaussian area formula
    AreaNorms:            [ 13.25, 26.31 ]   # normalizations that put signal area in
                                             # same scale as peak height.
    LongMaxHits:          [  1,  1,  1]      # max number hits in long pulse trains
    LongPulseWidth:       [ 16, 16, 16]      # max widths for hits in long pulse trains
    Chi2NDF:              2000               # maximum Chisquared / NDF allowed to store fit, if fail
                                             # will use "long" pulse method to return hit
    AllHitsInstanceName:  ""                 # If non-null then this will be the instance name of all hits output to event
                                             # in this case there will be two hit collections, one filtered and one containing all hits

    # Candididate peak finding done by tool, one tool instantiated per plane (but could be other divisions too)
    HitFinderToolVec:
    {
        CandidateHitsPlane0:  @local::candhitfinder_standard  # plane 0
        CandidateHitsPlane1:  @local::candhitfinder_standard  # plane 1
        CandidateHitsPlane2:  @local::candhitfinder_standard  # plane 2
    }

    # Declare the peak fitting tool
    PeakFitter:           @local::peakfitter_gaussian
    #PeakFitter:           @local::peakfitter_mrqdt

    # The below are for the hit filtering section of the gaushit finder
    FilterHits:           false              # true = do not keep undesired hits according to settings of HitFilterAlg object
    HitFilterAlg:
    {
        AlgName: "HitFilterAlg"
        MinPulseHeight: [5.0, 5.0, 5.0]      #minimum hit peak amplitude per plane
        MinPulseSigma:  [1.0, 1.0, 1.0]      #minimum hit rms per plane
    }
                                             # In addition to the filter alg we can also filter hits on the same pulse train
    PulseHeightCuts:      [3.0,  3.0,  3.0 ] # Minimum pulse height
    PulseWidthCuts:       [2.0,  1.5,  1.0 ] # Minimum pulse width
    PulseRatioCuts:       [0.35, 0.40, 0.20] # Ratio of pulse height to width
}

# Currently have to tell each tool which plane it is operating on... this is really
# for the histogramming option which enables hist naming without conflict
gaus_hitfinder.HitFinderToolVec.CandidateHitsPlane0.Plane: 0
gaus_hitfinder.HitFinderToolVec.CandidateHitsPlane1.Plane: 1
gaus_hitfinder.HitFinderToolVec.CandidateHitsPlane2.Plane: 2

dpraw_hitfinder:
{
 module_type:          		"DPRawHitFinder"
 LogLevel:	   		0

 CalDataModuleLabel:   		"caldata"
 MinSig:               		10    		# peak threshold for peak finding (in ADC). Peaks with lower amplitudes are neither fitted nor stored.
 TicksToStopPeakFinder: 	4		# when walking along waveform to find start and end points of a peak, stop when current tick is followed by minimum "TicksToStopPeakFinder" ticks 							# with equal or higher ADC counts (=inflection point). Stop anyway if ADC count of a tick is <= 0.

 GroupMaxDistance:		10		# maximum distance (in ticks) between two peaks to be grouped.
 GroupMinADC:			0		# minimum ADC count between two peaks to be grouped.
 SameShape:			true		# if true: fits within same group are forced to have identical shape

 DoMergePeaks:			false		# true: enables peak merging for peaks in the same group.
 MergeADCSumThreshold:		0.2		# merge two peaks only if (ADC sum of the smaller peak) < MergeADCSumThreshold*(ADC sum of the bigger peak).
 MergeMaxADCThreshold:		0.2		# merge two peaks only if (height of the smaller peak) < MergeADCSumThreshold*(height of the bigger peak).
 MinRelativePeakHeightLeft:	0.1		# if smaller peak is on the left: merge two peaks if (relative peak height of the smaller peak) < MinRelativePeakHeightLeft*(peak height of the smaller peak)
 MinRelativePeakHeightRight:	0.1		# if smaller peak is on the right: merge two peaks if (relative peak height of the smaller peak) < MinRelativePeakHeightRight*(peak height of the smaller peak)
 MergeMaxADCLimit:		25		# merge two peaks only if smaller peak <= MergeMaxADCLimit

 MinWidth:             		5              	# threshold for width (in ticks). Groups of peaks with smaller values are neither fitted nor stored.
 MinADCSum:    			10             	# threshold for ADC sum (in ADC*ticks). Groups of peaks with smaller values are neither fitted nor stored.
 MinADCSumOverWidth:    	0             	# threshold for ADC sum over width (in ADC*ticks/ticks). Groups of peaks with smaller values are neither fitted nor stored.

 MaxMultiHit:          		6               # maximum number of peaks in a group for the group to be fitted. If more, split the group in equally spaced hits without fitting.
						# When refitting, maximum number of peaks in group is: 1) not greater than 3x number of peaks before re-fitting.
 MaxGroupLength:          	20000            # Maximum length of group of peaks for the group to be fitted, in ticks. If more, split the group in equally spaced hits without fitting.
 MaxFluctuations:		20000		# If the sum of fluctuations in all peaks is > MaxFluctuations, split the group in equally spaced hits without fitting.

 TryNplus1Fits:        		false		# true: will try to re-fit poorly modeled groups of peaks (chi2PerNDF>Chi2NDFRetry) while adding (an) additional peak(s).
 Chi2NDFRetry:         		25              # for single peaks: if the first fit returns a Chi2/NDF greater than this, try to re-fit.
 Chi2NDFRetryFactorMultiHits: 	2       	# for groups of peaks (2 or more): if the first fit returns a Chi2/NDF greater than Chi2NDFRetryFactorMultiHits*Chi2NDFRetry, try to re-fit.

 Chi2NDFMax:          		2000            # for single peaks: maximum chi square / NDF allowed for a fit to be stored as recob::Hits. Otherwise, handle peak as long pulse train.
 Chi2NDFMaxFactorMultiHits: 	2       	# for groups of peaks (2 or more): maximum chi square / NDF allowed for a fit to be stored as recob::Hit. Otherwise, handle group as long pulse train.

 LongPulseWidth:       		40      	# max widths for hits in long pulse trains 
 LongMaxHits:         		20      	# max number hits in long pulse trains


 ChargeNorm:           		1		# Normalization for fit integral. Should be set to 1.
 NumBinsToAverage:     		0		# 0 or 1 = no averaging.
 MinTau:			0.01		# minimum value of the rising and falling time constants of the fit, in microseconds.
 MaxTau:			20		# maximum value of the rising and falling time constants of the fit, in microseconds.
 FitPeakMeanRange:		5		# range in that the fitter can move the mean of the fit function w.r.t. the peak.

 WidthNormalization:    	2.335		# standard width of the fitted hit is the FWHM of the fitted function (full width at half maximum). 
						# This width is divied by 'WidthNormalization' and saved to the recob::Hit.
						# standard value is chosen to be 2.335 = 2*sqrt(2*ln(2)), which is the relation between FWHM and standard deviation for the Gaussian distribution.
}

standard_rffhitfinderalg:
{
    AmplitudeThreshold:   [ 0.0 ]
    MeanMatchThreshold:   [ 2.0 ]
    MinMergeMultiplicity: [ 2 ]
}

rff_hitfinder:
{
 module_type:           "RFFHitFinder"
 WireModuleLabel:       "caldata"
 RFFHitFinderAlgParams: @local::standard_rffhitfinderalg
}

tt_hitfinder:
{
 module_type:         "TTHitFinder"
 CalDataModuleLabel:  "caldata"
 MinSigPeakInd:       6.0
 MinSigPeakCol:       11.0
 MinSigTailInd:       2.0
 MinSigTailCol:       3.67
 IndWidth:            3
 ColWidth:            3
}

#For now, keep the APAHitFinder configured just like the GausHitFinder
apa_hitfinder:               @local::gaus_hitfinder
apa_hitfinder.module_type:   "APAHitFinder"


standard_hitfinderana:
{
 module_type:          "HitFinderAna"
 HitsModuleLabel:      "ffthit"
 LArGeantModuleLabel:  "largeant"
}

gaus_hitfinderana:
{
 module_type:          "GausHitFinderAna"
 HitsModuleLabel:      "gaushit"
 LArGeantModuleLabel:  "largeant"
}

standard_fasthitfinder:
{
 module_type:         "RawHitFinder"
 CalDataModuleLabel:  "caldata"      
 MinSigInd:            5.0              # Induction signal height threshold  
 MinSigCol:            5.0             # Collection signal height threshold
 IndWidth:             6.0              # Initial width for induction fit
 ColWidth:             7.8              # Initial width for collection fit
 IndMinWidth:          4.0              # Induction Hit width threshold
 ColMinWidth:          6.0              # Collection hit width threshold
 MaxMultiHit:          3                # maximum hits for multi fit   
 AreaMethod:           0                # 0 = area by integral, 1 = area by gaussian area formula
 AreaNorms:            [ 13.25, 26.31 ] # normalizations that put signal area in
 ColMinWindow: 100         # minimum integration window for charge, coll plane
 IndCutoff: 1              # max distance between zero crossing and hit start
                             #  in ticks, for induction planes only
 SkipInd: false            # If true, do not make any hits for ind plane wires
 UncompressWithPed: false
}

standard_clustercrawlerhit:
{
 # call this: "cchit"
 module_type:         "HitFinder"
 CalDataModuleLabel:  "caldata"
 CCHitFinderAlg:      @local::standard_cchitfinderalg
} # standard_clustercrawlerhit


jp250L_hitfinder:       @local::standard_hitfinder
jp250L_gaushitfinder:   @local::gaus_hitfinder

bo_hitfinder:       @local::standard_hitfinder
bo_gaushitfinder:   @local::gaus_hitfinder

argoneut_hitfinder:     @local::standard_hitfinder
argoneut_gaushitfinder: @local::gaus_hitfinder
argoneut_mc_hitfinder:  @local::standard_hitfinder
argoneut_mc_hitfinder.AreaNorms: [ 12.89, 14.51 ]

microboone_hitfinder:     @local::standard_hitfinder
microboone_gaushitfinder: @local::gaus_hitfinder
microboone_rffhitfinder: @local::rff_hitfinder
microboone_hitfinder.IndMinWidth: 1.0
microboone_hitfinder.ColMinWidth: 1.0
microboone_gaushitfinder.MinSig: [ 6.0, 6.0, 11.0 ]
microboone_gaushitfinder.InitWidth: [ 6.0, 6.0, 7.8 ]
microboone_gaushitfinder.MinWidth:  [ 4.0, 4.0, 6.0 ]
microboone_gaushitfinder.AreaNorms: [ 13.25, 13.25, 26.31 ]
microboone_clustercrawlerhit: @local::standard_clustercrawlerhit
microboone_clustercrawlerhit.CCHitFinderAlg:      @local::microboone_cchitfinderalg
END_PROLOG
