#include "services_dune.fcl"
#include "caldata_dune.fcl"
#include "imagepatternalgs.fcl"

# Example configuration of job file dumping ADC to text files or
# applying CNN in the inference mode to clustered / single hits.
# Configured for ProtoDUNE, hopefully straight-forward to adopt
# to other experiments.
# Please, have look at the bottom of the file and configure all
# neccessary paths and/or CNN model files.

process_name: PointId

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodune_services
			            @table::protodune_simulation_services
}

source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

physics:
{
 producers:
 {
  # filter out track-like clusters, produce new collection
  # of clusters which are recognized as EM-like (single,
  # unclustered hits are also tested and if look like EM
  # activity then single-hit clusters are created for them)
  emtrackid: @local::standard_emtrackclusterid

  # detect decay vertices along reconstructed 3D tracks
  # produces recob::Vertex objects associated to input tracks
  decayid:   @local::standard_particledecayid
 }

 analyzers:
 {
  # module making ADC + MC-truth data dumps for any CNN application
  pointid: @local::standard_pointidtrainingdata

  # simple efficiency test for EM vs track separation
  testeff: @local::standard_pointidefftest
 }

 reco: [ ]

 # use this to run EM vs track separation
 idreco: [ emtrackid ]

 # use this to dump ADC + MC-truth data
 anadata: [ pointid ]
 
 # use this to run efficiency test
 anatest: [ testeff ]

 stream1:  [ out1 ]

 # use this to run EM vs track separation
 #trigger_paths: [ idreco ]
 #end_paths:     [ stream1 ]

 # use this to dump ADC + MC-truth data
 trigger_paths: [ reco ]
 end_paths:     [ anadata ]
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}

# ADC + MC-truth data dumping configuration
# Note for other experiments: check if your detector has TPC's you are asking for
physics.analyzers.pointid.TrainingDataAlg.SimulationLabel: "largeant"
physics.analyzers.pointid.TrainingDataAlg.SaveVtxFlags:    true         # save (or not) interaction and decay vertex info
physics.analyzers.pointid.TrainingDataAlg.DriftWindow:     6            # downsampling window in drift ticks
physics.analyzers.pointid.TrainingDataAlg.DownscaleFn:     "mean"       # downsampling function
physics.analyzers.pointid.SelectedTPC:     [2]   # all TPC's if empty list, or save data from selected TPC's only
physics.analyzers.pointid.SelectedView:    [2]   # all views if empty list, or save data from selected views only
physics.analyzers.pointid.OutTextFilePath: "/home/your_dir/sub_dir_to_save_files" # output directory for data dump
physics.analyzers.pointid.Crop:            true  # set to false when dumping noise (empty) events

# EM vs track separation configuration:
# PatchSizeW and PatchSizeD together with DriftWindow have to be corresponding
# to the CNN model parameters (here the patch is 16cm2, assuming ProtoDUNE's
# 5mm wire pitch, 2MHz sampling and drift speed at 500V/cm)
physics.producers.emtrackid.PointIdAlg.NNetModelFile:      "/home/your_dir/your_cnn_model.nnet"
physics.producers.emtrackid.PointIdAlg.PatchSizeW:         32     # how many wires in patch
physics.producers.emtrackid.PointIdAlg.PatchSizeD:         44     # how many downsampled ADC entries
physics.producers.emtrackid.PointIdAlg.DriftWindow:        6      # downsampling window in drift ticks
physics.producers.emtrackid.PointIdAlg.DownscaleFn:        "mean" # downsampling function
physics.producers.emtrackid.HitModuleLabel:                "lineclusterdc" # all hits (used to classify leftovers from clustering)
physics.producers.emtrackid.ClusterModuleLabel:            "lineclusterdc" # clusters to be classified
physics.producers.emtrackid.Views:                         []  # possible to run over selected views only (all views if empty list)

# decay detection configuration:
# PatchSizeW and PatchSizeD together with DriftWindow have to be corresponding
# to the CNN model parameters (here the patch is 16cm2, assuming ProtoDUNE's
# 5mm wire pitch, 2MHz sampling and drift speed at 500V/cm)
physics.producers.decayid.PointIdAlg.NNetModelFile:      "/home/your_dir/your_cnn_model.nnet"
physics.producers.decayid.PointIdAlg.PatchSizeW:         32     # how many wires in patch
physics.producers.decayid.PointIdAlg.PatchSizeD:         44     # how many downsampled ADC entries
physics.producers.decayid.PointIdAlg.DriftWindow:        6      # downsampling window in drift ticks
physics.producers.decayid.PointIdAlg.DownscaleFn:        "mean" # downsampling function
physics.producers.decayid.TrackModuleLabel:              "pmtrack" # tracks to be processed
physics.producers.decayid.PointThreshold:                0.998  # threshold on p(decay) used to select decay candidates

# EM vs track eff. test configuration, similar to the above:
physics.analyzers.testeff.NNetModuleLabel:               "emtrackid"
physics.analyzers.testeff.View:                          2
physics.analyzers.testeff.SaveHitsFile:                  true

