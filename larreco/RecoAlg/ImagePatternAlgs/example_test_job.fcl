#include "services_dune.fcl"
#include "imagepatternalgs.fcl"

# Example configuration of job file which can access CNN outputs
# produced for tracks / clusters / single hits and test the
# efficiency. Mudule can write out info to text file so you can
# plot results and MC truth.
# Configured for ProtoDUNE, hopefully straight-forward to adopt
# to other experiments.

process_name: TestPointId

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodune_services
			            @table::protodune_simulation_services
}

source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

physics:
{
 analyzers:
 {
  # efficiency test, mostly on for EM vs track separation
  testeff: @local::standard_pointidefftest
 }
 anatest: [ testeff ]

 trigger_paths: [ ]
 end_paths:     [ anatest ]
}

physics.analyzers.testeff.NNetModuleLabel:               "emtrkmichelid:emtrkmichel:RecoEm" # usually instance name is used in MVA data products, usually you can skip the process name
physics.analyzers.testeff.View:                          2    # will do test for the selected projection
physics.analyzers.testeff.SaveHitsFile:                  true # this will put to text file CNN output at hit positions

