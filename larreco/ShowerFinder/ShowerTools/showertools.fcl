#include "trackfinderalgorithms.fcl"
#include "showeralgorithms.fcl"
#include "clusteralgorithms.fcl"
#include "calorimetry.fcl"

#There are more tools on DomBarker_ShowerBranch

BEGIN_PROLOG

showerpcadirection:{
    tool_type: ShowerPCADirection
    PFParticleModuleLabel: "pandora"
    NSegments: 6           #If using the RMS gradient to decide what direction to go in
                           #this is the number of segements to split the shower into.
    UseStartPosition: true #The direction of the PCA is in the direction of 
                           #(Shower Center - Start Position)
    ChargeWeighted:   true #Apply a charge weighting in the PCA.
    TRACSAlg:         @local::standard_tracsalg
}

showerlinearenergy:{
    tool_type:  ShowerLinearEnergy
    PFParticleModuleLabel: "pandora"
    UGradient:   0.00155644  #Gradient of the linear graph of the total charge to total
                             #energy, in the U plane. in MeV/ADC.
    UIntercept:  5.92931     #Intercept of the linear graph of the total charge to total                             
                             #energy in the plane. MeV 
    VGradient:   0.00173915
    VIntercept:  -2.13307
    ZGradient:   0.00153631
    ZIntercept:  5.19711
    XGradient:   0
    XIntercept:  0
    YGradient:   0
    YIntercept:  0
    ThreeDGradient:  0
    ThreeDIntercept: 0
}

shower2Dlinearregressiontrackhitfinder:{
    tool_type:             Shower2DLinearRegressionTrackHitFinder
    TRACSAlg:              @local::standard_tracsalg
    Nfitpass:              4                     #Number of time to fit the straight line
                                                 #to the hits
    Nfithits:              [83, 50, 33, 33]      #Max Number of hits to fit to
    Toler:                 [50., 8.3, 3.3, 3.3 ] #Tolerance or each interaction. Defined
                                                 #as the perpendicualar distance from 
                                                 #the best fit line. 
    ApplyChargeWeight:     true                  #Apply charge weighting to the fit.
    PFParticleModuleLabel: "pandora"
    HitsModuleLabel:       "linecluster"
    }

showerpmatrackfinder:{
    tool_type: ShowerPMATrackFinder
    MinTrajectoryPoints: 2 #Max number of trajectory points 
                           #required to say the fit as good
    ProjectionMatchingAlg: @local::standard_projectionmatchingalg
    }

shower3Dtrackhitfinder:{
    tool_type: Shower3DTrackHitFinder
    TRACSAlg:          @local::standard_tracsalg
    PFParticleModuleLabel: "pandora"
    MaxProjectionDist:     10     #Max distance a hit can be in the direction of 
                                  #the shower in cm
    MaxPerpendicularDist:  1      #Max distance a hit can be in the perpendicular
                                  #direction of the shower in cm
    ForwardHitsOnly:       true   #Don't use hits behind the vertex.
    DebugEVD:              false
    AllowDyanmicLength:    false  #If the Track legth is saved use that instead of 
                                  #MaxProjectionDist
}

showerstartposition:{
    tool_type: ShowerStartPosition
    PFParticleModuleLabel: "pandora"
    TRACSAlg: @local::standard_tracsalg
}

showerstandardcalodedx:{
    tool_type: ShowerStandardCalodEdx
    CalorimetryAlg:  @local::standard_calorimetryalgmc
    MaxHitPlane:     true #Set the best planes as the one with the most hits 
    MissFirstPoint:  true #Do not use any hits from the first wire
    dEdxTrackLength: 3    #Max length from a hit can be to the start point in cm.
}

showertracktrajectorypointdirection: {
    tool_type: ShowerTrackTrajectoryPointDirection
    TrajPoint:         1   #Trajectory point to get the direction from.    
    UsePandoraVertex: true #Direction from point defined as 
                           #(Position of traj point - Vertex) rather than 
                           #(Position of traj point - Track Start Point).
    UsePositonInfo:   true #Don't use the directionAt point rather than definition above.
                           #i.e. ((Position of traj point + 1) - (Position of traj point)
    }

showersmarttracktrajectorypointdirection: {
    tool_type: ShowerSmartTrackTrajectoryPointDirection
    UsePandoraVertex:    false  #Direction from point defined as 
                                #(Position of traj point - Vertex) rather than 
                                #(Position of traj point - Track Start Point).
    AllowDynamicSliding: true   #Rather than evualte the angle from the start use 
                                #the previous trajectory point position.
    UsePositionInfo:     false  #Don't use the DirectionAtPoint rather than 
                                #definition above.
                                #((Position of traj point + 1) - (Position of traj point)
    UseStartPos:         false  #Rather the using the angles between the directions 
                                #from start position to the trajectory points 
                                #use the angle between the the points themselves 
    AngleCut:           0.01745 #Angle between the directions has to be less than
                                #this value in radians
}

showerstartpositioncheater:{
    tool_type:               ShowerStartPositionCheater
    TRACSAlg:            @local::standard_tracsalg
    TRACSCheatingAlg:    @local::standard_tracscheatingalg
    PFParticleModuleLabel:  "pandora"
    HitModuleLabel:         "linecluster"
}

showerdirectioncheater:{
    tool_type:              ShowerDirectionCheater
    TRACSAlg:           @local::standard_tracsalg
    TRACSCheatingAlg:   @local::standard_tracscheatingalg
    PFParticleModuleLabel:  "pandora"
    NSegments:              6     #Number of segements the shower should be split into
                                  #for the RMS analysis
    RMSFlip:                false #Decide to flip the direction on the RMS info
    VertexFlip:             false #Decide to flip the direction based on the vertex 
                                  #position relative shower center.
}

showertrackfindercheater:{
    tool_type:               ShowerTrackFinderCheater
    TRACSAlg:            @local::standard_tracsalg
    TRACSCheatingAlg:    @local::standard_tracscheatingalg
    PFParticleModuleLabel:  "pandora"
    HitModuleLabel:         "linecluster"
    MaxProjectionDist:      10
    MaxPerpendicularDist:   1
    DebugEVD:               false
}

showerslidingstandardcalodedx:{
    tool_type: ShowerSlidingStandardCalodEdx
    TRACSAlg:       @local::standard_tracsalg
    CalorimetryAlg: @local::standard_calorimetryalgmc
    MinDistCutOff:         2    #Distance in wires a hit has to be from the start 
                                #position of the track to be used
    MaxDist:               2    #Distance in wires a that a trajectory point can
                                #be from a spacepoint to match to it.
    MinAngleToWire:        0    #Minimum angle between the wire direction and the shower 
                                #direction for the spacepoint to be used. in radians 
                                #Default means the cut has no effect.
    ShapingTime:           999  #Defualt means the cut has no effect. in microseconds.
    dEdxTrackLength:       999  #Max Distance a spacepoint can be away 
                                #from the start of the track. in seconds
    CutStartPosition:     false #Remove hits using MinDistCutOff from the vertex as well 
    UseMedian:            true  #Use the median dEdx rather the mean.
    PFParticleModuleLabel: "pandora"
}


END_PROLOG
